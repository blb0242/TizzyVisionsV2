{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","users","setUsers","username","setUsername","email","setEmail","useEffect","axios","get","then","catch","err","console","log","length","onSubmit","post","alert","window","location","reload","onChange","e","target","value","type","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yPAyEeA,EAtEH,WAAa,IAAD,EACGC,mBAAS,MADZ,mBAChBC,EADgB,KACTC,EADS,OAGSF,mBAAS,IAHlB,mBAGhBG,EAHgB,KAGNC,EAHM,OAIGJ,mBAAS,IAJZ,mBAIhBK,EAJgB,KAITC,EAJS,KAkCvB,OA7BAC,qBAAU,WACTC,IACEC,IAAI,cACJC,MAAK,SAACT,GAAD,OAAWC,EAASD,MACzBU,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC3B,IAyBF,oCACC,0CACW,OAAVX,EACA,yCACoB,IAAjBA,EAAMc,OACT,gDAEA,oCACC,+CACA,8BAUF,0BAAMC,SA1CR,WACkB,KAAbb,EAIU,KAAVE,EAIJG,IACES,KAAK,aAAc,CACnBd,SAAUA,EACVE,MAAOA,IAEPK,MAAK,WACLQ,MAAM,gCACNC,OAAOC,SAASC,YAEhBV,OAAM,WACNO,MAAM,gDAbPA,MAAM,+BAJNA,MAAM,oCAyCL,2BACCI,SAAU,SAACC,GAAD,OAAOnB,EAAYmB,EAAEC,OAAOC,QACtCC,KAAK,OACLC,YAAY,wBAEb,2BACCL,SAAU,SAACC,GAAD,OAAOjB,EAASiB,EAAEC,OAAOC,QACnCC,KAAK,OACLC,YAAY,6BAEb,2BAAOD,KAAK,cCxDIE,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.b7cd3299.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport axios from 'axios';\n\nconst App = function () {\n\tconst [users, setUsers] = useState(null);\n\n\tconst [username, setUsername] = useState(\"\");\n\tconst [email, setEmail] = useState(\"\");\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(\"/api/users\")\n\t\t\t.then((users) => setUsers(users))\n\t\t\t.catch((err) => console.log(err));\n\t}, []);\n\n\tfunction submitForm() {\n\t\tif (username === \"\") {\n\t\t\talert(\"Please fill the username field\");\n\t\t\treturn;\n\t\t}\n\t\tif (email === \"\") {\n\t\t\talert(\"Please fill the email field\");\n\t\t\treturn;\n\t\t}\n\t\taxios\n\t\t\t.post(\"/api/users\", {\n\t\t\t\tusername: username,\n\t\t\t\temail: email,\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\talert(\"Account created successfully\");\n\t\t\t\twindow.location.reload();\n\t\t\t})\n\t\t\t.catch(function () {\n\t\t\t\talert(\"Could not creat account. Please try again\");\n\t\t\t});\n\t}\n\treturn (\n\t\t<>\n\t\t\t<h1>My Project</h1>\n\t\t\t{users === null ? (\n\t\t\t\t<p>Loading...</p>\n\t\t\t) : users.length === 0 ? (\n\t\t\t\t<p>No user available</p>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<h2>Available Users</h2>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t{/* {users.map((user, index) => (\n\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\tName: {user.name} - Email: {user.email}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))} */}\n\t\t\t\t\t</ol>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<form onSubmit={submitForm}>\n\t\t\t\t<input\n\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Enter your username\"\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Enter your email address\"\n\t\t\t\t/>\n\t\t\t\t<input type=\"submit\" />\n\t\t\t</form>\n\t\t</>\n\t);\n};\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}